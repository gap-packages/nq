* document --with-gaproot in README / manual

* make a new release

* start using gh-pages

* Release process:
  - add script which automates updating the version in all places:
     PackageInfo.g, configure.ac, ...
    this is currently quite easy to forget. Also, the release date
    should be updated in files as necessary, including
      PackageInfo.g, CHANGES, ...
  - automate packaging release tarball automatic via a script
  - do *not* prebuild docs anymore, instead, ensure that docs are automatically
    built when the user builds nq.

* Buildsystem:
  - consider using a single Makefile, or alternatively automake
    (automake now has a single-Makefile mode!)
  - add dependency tracking
  - add description in the manual of how to use configure arguments and environment variables

* Test suite:
  - Add a "proper" test suite in tst
  - Take a look at gap/nq.tst, possibly move this into tst/
  - Maybe example should become part of tst/ respective part
    of the test suite

* Add EpimorphismNilpotentQuotientOp method(s)

* Explain in the README how to build the documentation.

* Do not install any writeable global objects, at least not with a prefix;
  consider switching to GAP 4.5 namespaces

* README should explain the full build procedure, esp. regarding 32 vs. 64 bit,
  and support for GAP configs:
     ./configure CONFIGNAME=default32 ABI=32

* Consider honoring CFLAGS etc. passed as parameter to configure

* Do not call Info(InfoWarning,1,"..."); in AvailabilityTest. Instead use
  LogPackageLoadingMessage; however, that's only available in GAP 4.5+,
  so either don't log a warning at all, or somehow do this logging
  in a way that doesn't harm GAP 4.4 compatibility.

* Document NilpotentQuotient methods for expression trees.


=======================================================================
THE FOLLOWING TODOS ARE TAKEN FROM THE OLD README FILE. SOME OF
THESE MAY NO LONGER BE RELEVANT. READ WITH CAUTION.
=======================================================================

On the agenda for  future versions  of  the program are  the following
items :

    Use combinatorial collection
    Improve the speed of checking the Engel conditions
    Avoid consistency tests used for tail computations
    Speed up elimination of generators and extending the pc pres
    Use column permutations in the Kannan-Bachem algorithm
    Add more comments to the code
    Use the mpz-interface of the GNU multiple precision package
    Find a more satisfying solution for generating sets for each
         central factor.
    Multiple precision integers as exponents of generators
    Better control over the output
    Output computed nilpotent quotient if the program times out


=======================================================================
THE FOLLOWING TODOS ARE TAKEN FROM WERNER'S OLD TODO FILE. SOME OF
THESE MAY NO LONGER BE RELEVANT. READ WITH CAUTION.
=======================================================================



This is a list of tasks which need to be done before nq is released as
a GAP 4 package.

17 Aug 2002:  None if the  following items are critical.  Therefore, I
postpone all of this until after the package is released.

-- The configure script should check if the package is installed as a
   GAP package

-- NilpotentQuotient() should return a quotient system.

-- Update the test files and testNq.

-- Add access to the Engel options.

-- If configure cannot find certain components, then one should run
   configure again and not make with the correct options.  This way,
   configure can remember the correct values and it will suffice make.

-- Update installation procedure

-- It should be possible to define the nilpotency class as part of the 
   input file. 

-- Create an info class InfoANU_NQ and put Info() statements into the
   code.
-- Should I keep the last nq-record for what purpose?

-- The exit codes of the standalone should be interpreted.  For this I
   need to go through the code and make sure that each exit events has
   its own exit code.

nq todos:

-- The evaluation of commutators should decrease the class by one
   before computing the two entries of the commutators.  (I have done
   this.  There is some cleaning up necessary as the class is
   sometimes negative)

-- More statistics for the integer routines, for example, the density
   of the input.

-- Make sure that the values returned when the nq exits are correct.
   Then the calling GAP script knows why nq has terminated
   prematurely.  Make sure that the resulting GAP file is consistent
   so that the calling routine can read in partial results.
